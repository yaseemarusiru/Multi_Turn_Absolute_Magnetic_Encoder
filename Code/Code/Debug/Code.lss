
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095b  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000721  00000000  00000000  00000d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f6  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b2  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026e  00000000  00000000  00001efe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  88:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z9I2C_Startc>:
	if (180<angle && angle<=270) q = 3;
	if (270<angle && angle<360) q = 4;
	if (q!=preQ) {
		if (q==1 && preQ==4) byte3++;
		if (q==4 && preQ==1) byte3--;
		preQ = q;
  90:	94 ea       	ldi	r25, 0xA4	; 164
  92:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  96:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  9a:	99 23       	and	r25, r25
  9c:	e4 f7       	brge	.-8      	; 0x96 <_Z9I2C_Startc+0x6>
  9e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  a2:	98 7f       	andi	r25, 0xF8	; 248
  a4:	98 30       	cpi	r25, 0x08	; 8
  a6:	91 f4       	brne	.+36     	; 0xcc <_Z9I2C_Startc+0x3c>
  a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b6:	88 23       	and	r24, r24
  b8:	e4 f7       	brge	.-8      	; 0xb2 <_Z9I2C_Startc+0x22>
  ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  be:	88 7f       	andi	r24, 0xF8	; 248
  c0:	88 31       	cpi	r24, 0x18	; 24
  c2:	31 f0       	breq	.+12     	; 0xd0 <_Z9I2C_Startc+0x40>
  c4:	80 32       	cpi	r24, 0x20	; 32
  c6:	31 f4       	brne	.+12     	; 0xd4 <_Z9I2C_Startc+0x44>
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	08 95       	ret
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	08 95       	ret
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	08 95       	ret
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	08 95       	ret

000000d8 <_Z18I2C_Repeated_Startc>:
  d8:	94 ea       	ldi	r25, 0xA4	; 164
  da:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e2:	99 23       	and	r25, r25
  e4:	e4 f7       	brge	.-8      	; 0xde <_Z18I2C_Repeated_Startc+0x6>
  e6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ea:	98 7f       	andi	r25, 0xF8	; 248
  ec:	90 31       	cpi	r25, 0x10	; 16
  ee:	91 f4       	brne	.+36     	; 0x114 <_Z18I2C_Repeated_Startc+0x3c>
  f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  f4:	84 e8       	ldi	r24, 0x84	; 132
  f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fe:	88 23       	and	r24, r24
 100:	e4 f7       	brge	.-8      	; 0xfa <_Z18I2C_Repeated_Startc+0x22>
 102:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 106:	88 7f       	andi	r24, 0xF8	; 248
 108:	80 34       	cpi	r24, 0x40	; 64
 10a:	31 f0       	breq	.+12     	; 0x118 <_Z18I2C_Repeated_Startc+0x40>
 10c:	88 34       	cpi	r24, 0x48	; 72
 10e:	31 f4       	brne	.+12     	; 0x11c <_Z18I2C_Repeated_Startc+0x44>
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	08 95       	ret
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	08 95       	ret

00000120 <_Z9I2C_Writec>:
 120:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 124:	84 e8       	ldi	r24, 0x84	; 132
 126:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12e:	88 23       	and	r24, r24
 130:	e4 f7       	brge	.-8      	; 0x12a <_Z9I2C_Writec+0xa>
 132:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 136:	88 7f       	andi	r24, 0xF8	; 248
 138:	88 32       	cpi	r24, 0x28	; 40
 13a:	21 f0       	breq	.+8      	; 0x144 <_Z9I2C_Writec+0x24>
 13c:	80 33       	cpi	r24, 0x30	; 48
 13e:	21 f4       	brne	.+8      	; 0x148 <_Z9I2C_Writec+0x28>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	08 95       	ret

0000014c <_Z8I2C_Stopv>:
 14c:	84 e9       	ldi	r24, 0x94	; 148
 14e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 152:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 156:	84 fd       	sbrc	r24, 4
 158:	fc cf       	rjmp	.-8      	; 0x152 <_Z8I2C_Stopv+0x6>
 15a:	08 95       	ret

0000015c <_Z12I2C_Read_Ackv>:
 15c:	84 ec       	ldi	r24, 0xC4	; 196
 15e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 162:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 166:	88 23       	and	r24, r24
 168:	e4 f7       	brge	.-8      	; 0x162 <_Z12I2C_Read_Ackv+0x6>
 16a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 16e:	08 95       	ret

00000170 <_Z13I2C_Read_Nackv>:
 170:	84 e8       	ldi	r24, 0x84	; 132
 172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17a:	88 23       	and	r24, r24
 17c:	e4 f7       	brge	.-8      	; 0x176 <_Z13I2C_Read_Nackv+0x6>
 17e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 182:	08 95       	ret

00000184 <_Z9SPI_Writec>:
 184:	8e bd       	out	0x2e, r24	; 46
 186:	0d b4       	in	r0, 0x2d	; 45
 188:	07 fe       	sbrs	r0, 7
 18a:	fd cf       	rjmp	.-6      	; 0x186 <_Z9SPI_Writec+0x2>
 18c:	08 95       	ret

0000018e <main>:

int main(void)
{
	/* SPI Initialize */
	
	DDRB &= ~((1<<MOSI)|(1<<SCK)|(1<<SS));  /* Make MOSI, SCK, SS as input pins */
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	83 7d       	andi	r24, 0xD3	; 211
 192:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<MISO);			/* Make MISO pin as output pin */
 194:	84 b1       	in	r24, 0x04	; 4
 196:	80 61       	ori	r24, 0x10	; 16
 198:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE);	// Enable SPI in slave mode
 19a:	80 e4       	ldi	r24, 0x40	; 64
 19c:	8c bd       	out	0x2c, r24	; 44
	SPCR = (1<<SPIE);	//enable interrupts
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	8c bd       	out	0x2c, r24	; 44
	
	sei();
 1a2:	78 94       	sei
	
	while (1)
	{
		/* I2C */
		
		TWBR = BITRATE(TWSR=0x00);	// Get bit rate register value by formula i - initialize I2C
 1a4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1a8:	8e ef       	ldi	r24, 0xFE	; 254
 1aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
		I2C_Start(AS5600_ADDRESS);/* Start I2C with device write address */
 1ae:	86 e3       	ldi	r24, 0x36	; 54
 1b0:	0e 94 48 00 	call	0x90	; 0x90 <_Z9I2C_Startc>
		I2C_Write(0x0D);		/* Write start memory address for data write */
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
 1b6:	0e 94 90 00 	call	0x120	; 0x120 <_Z9I2C_Writec>
		I2C_Stop();			/* Stop I2C */
 1ba:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z8I2C_Stopv>
		
		uint8_t count = 0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t time = 10;
		while (count < time){
 1c0:	8a 30       	cpi	r24, 0x0A	; 10
 1c2:	10 f4       	brcc	.+4      	; 0x1c8 <main+0x3a>
			count ++ ;
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
		I2C_Write(0x0D);		/* Write start memory address for data write */
		I2C_Stop();			/* Stop I2C */
		
		uint8_t count = 0;
		uint8_t time = 10;
		while (count < time){
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <main+0x32>
			count ++ ;
		}

		
		I2C_Repeated_Start(AS5600_ADDRESS);/* Repeat start I2C SLA+R */
 1c8:	86 e3       	ldi	r24, 0x36	; 54
 1ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z18I2C_Repeated_Startc>
		for (int i = 0; i<2; i++)/* Read data with acknowledgment */
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
 1d2:	c2 30       	cpi	r28, 0x02	; 2
 1d4:	d1 05       	cpc	r29, r1
 1d6:	7c f4       	brge	.+30     	; 0x1f6 <main+0x68>
		{
			if (i == 0) byte1 = I2C_Read_Ack();
 1d8:	20 97       	sbiw	r28, 0x00	; 0
 1da:	21 f4       	brne	.+8      	; 0x1e4 <main+0x56>
 1dc:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z12I2C_Read_Ackv>
 1e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <byte1>
			if (i == 1) byte2 = I2C_Read_Ack();
 1e4:	c1 30       	cpi	r28, 0x01	; 1
 1e6:	d1 05       	cpc	r29, r1
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <main+0x64>
 1ea:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z12I2C_Read_Ackv>
 1ee:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <byte2>
			count ++ ;
		}

		
		I2C_Repeated_Start(AS5600_ADDRESS);/* Repeat start I2C SLA+R */
		for (int i = 0; i<2; i++)/* Read data with acknowledgment */
 1f2:	21 96       	adiw	r28, 0x01	; 1
 1f4:	ee cf       	rjmp	.-36     	; 0x1d2 <main+0x44>
		{
			if (i == 0) byte1 = I2C_Read_Ack();
			if (i == 1) byte2 = I2C_Read_Ack();
		}
		I2C_Read_Nack();		/* Read flush data with nack */
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <_Z13I2C_Read_Nackv>
		I2C_Stop();			/* Stop I2C */
 1fa:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z8I2C_Stopv>
		
		int1 = (int) byte1;
 1fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <byte1>
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <int1+0x1>
 20a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <int1>
		int2 = (int) byte2;
 20e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <byte2>
 212:	89 2f       	mov	r24, r25
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <int2+0x1>
 21a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <int2>
		angle = (int2<<8)|int1;
 21e:	98 2f       	mov	r25, r24
 220:	88 27       	eor	r24, r24
 222:	82 2b       	or	r24, r18
 224:	93 2b       	or	r25, r19
 226:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	SPCR = (1<<SPE);	// Enable SPI in slave mode
	SPCR = (1<<SPIE);	//enable interrupts
	
	sei();
	
	while (1)
 22e:	ba cf       	rjmp	.-140    	; 0x1a4 <main+0x16>

00000230 <__vector_17>:
		angle = (int2<<8)|int1;
		
	}
}

ISR(SPI_STC_vect){
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	SPI_Write(byte1);
 252:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <byte1>
 256:	0e 94 c2 00 	call	0x184	; 0x184 <_Z9SPI_Writec>
	SPI_Write(byte2);
 25a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <byte2>
 25e:	0e 94 c2 00 	call	0x184	; 0x184 <_Z9SPI_Writec>
	SPI_Write(byte3);
 262:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <byte3>
 266:	0e 94 c2 00 	call	0x184	; 0x184 <_Z9SPI_Writec>
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
